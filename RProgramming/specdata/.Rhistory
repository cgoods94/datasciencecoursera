install.packages("slidify")
install.packages("ggplot2")
library(ggplot2)
search()
install.packages(KernSmooth)
install.packages("KernSmooth")
library(KernSmooth)
setwd(/Users/cgoods94/Projects/datasciencecoursera)
setwd("Users/cgoods94/Projects/datasciencecoursera")
setwd("~/Projects/datasciencecoursera")
read.csv("hw1_data.csv")
ex1 <- c(17, 14, 4, 5, 13, 12, 10)
ex1[ex1 > 10] <- 4
ex1 <- c(17, 14, 4, 5, 13, 12, 10)
ex1[ex1 > 10] <- 4
ex1 <- c(17, 14, 4, 5, 13, 12, 10)
ex1[ex1 > 10] <- 4
clear
x
x <- read.csv("hw1_data.csv")
x
col1 <- x[1,]
col1 <- x[,1]
sum(is.na(col1))
mean(col1[is.na(col1) == FALSE])
mean(col1)
col1 <- col1[is.na(col1) == FALSE]
MEAN(col1)
mean(col1)
x
ss <- x[["Ozone" > 31]]\
ss <- x[["Ozone" > 31]]
ss
ss <- x["Ozone" > 31]
ss
x
ss <- x[["Ozone" > 31]]
ozone_logic <- x$Ozone > 31
ozone_logic <- x$Ozonze > 31 && !is.na(x$Ozone)
ozone_logic <- x$Ozone > 31
ss <- x[ozone_logic]
ss <- x[[ozone_logic]]
x
clear
ozone_logic <- x$Ozone > 31
ss <- x[ozone_logic]
ss <- x[ozone_logic == TRUE]
x(ozone_logic)
x
ss <- x[(ozone_logic),]
sum(ozone_logic)
sum(ozone_logic[!is.na(ozone_logic)])
x
x[1:2, ]
nrow(x)
x[nrow(x)-1:nrow(x), ]
x[152:153, ]
x[[47, "Ozone"]]
x[[47, 1]]
ozone_logic <- is.na(x[[, "Ozone"]])
ozone_logic <- !is.na(x[[, "Ozone"]])
ozone_logic <- !is.na(x$Ozone)
test <- x[[ozone_logic,]]
test <- x[[ozone_logic]]
test <- x[ozone_logic == TRUE,]
mean(test$Ozone)
x <- test
mean(x$Ozone)
ozone_logic2 <- x$Ozone > 31
test <- x[ozone_logic2,]
test
View(ss)
View(ss)
clear(ss)
ozone_logic
ozone_logic <- (x$Ozone > 31) AND (x$Temp > 90)
ozone_logic <- (x$Ozone > 31) & (x$Temp > 90)
test <- x[ozone_logic,]
test
mean(test$Solar.R)
x <- read.csv(hw1_data.csv)
x <- read.csv("hw1_data.csv")
x <- x(x$Month == 6,)
x <- x[x$Month == 6]
x <- x[x$Month == 6,]
x
mean(x$Temp)
x <- read.csv("hw1_data.csv")
y <- x[x$Month == 5]
y <- x[x$Month == 5,]
max(y$Ozone)
y <- y[!is.na(y$Ozone)]
y <- y[!is.na(y$Ozone),]
max(y$Ozone)
install.packages("swirl")
packageVersion(swirl)
packageVersion("swirl")
library(swirl)
rm(list=ls())
swirl()
5 + 7
x <- 5 + 7
x
y <- x - 3
y
c(1.1, 9, 3.14)
z <- c(1.1, 9, 3.14)
?c()
?c
z
c(z, 555, z)
z * 2 + 100
my_sqrt(z - 1)
my_sqrt <- sqrt(z - 1)
my_sqrt
my_div <- z / my_sqrt
my_div
c(1, 2, 3, 4) + c(0, 10)
c(1, 2, 3, 4) + c(0, 10, 100)
z * 2 + 1000
my_div
getwd()
ls()
x <- 9
ls()
list.files()
?list.files
args(list.files)
old.dir <- getwd()
dir.create("testdir")
setwd(testdir)
setwd("testdir")
file.create("mytest.R")
ls()
list.files()
file.exists("mytest.R")
file.info("mytest.R")
file.rename("mytest.R", "mytest2.R")
file.copy("mytest2.R", "mytest3.R")
file.path("mytest3.R")
file.path('folder1', 'folder2')
?dir.create
dir.create(file.path('testdir2', 'testdir3'), recursive = TRUE)
setwd(old.dir)
1:20
pi:10
15:1
?`:`
seq(1, 20)
seq(0, 10, by=0.5)
seq(5, 10, length=30)
my_seq <- seq(5, 10, legnth=30)
my_seq <- seq(5, 10, length=30)
length(my_seq)
1:length(my_seq)
seq(along.with = my_seq)
seq_along(my_seq)
rep(0, times = 40)
rep(c(0, 1, 2), times = 10)
rep(c(0, 1, 2), each = 10)
num_vect <- c(0.5, 55, -10, 6)
tf <- num_vect < 1
tf
new <- num_vect >= 6
num_vect >= 6
my_char <- c("My", "name", "is")
my_char
past(my_char, collapse = " ")
paste(my_char, collapse = " ")
my_name <- c(my_char, "Connor")
my_name
paste(my_name, collapse = " ")
paste("Hello", "world!", sep = " ")
paste(1:3, c("X", "Y", "Z"), sep = "")
paste(LETTERS, 1:4, sep = "-")
x <- c(44, NA, 5, NA)
x * 3
y <- rnorm(1000)
z <- rep(NA, 1000)
my_data <- sample(c(y, z), 100)
my_na <- is.na(my_data)
my_na
my_data == NA
sum(my_na)
my_data
0 / 0
Inf - Inf
x
x[1:10]
x[is.na(x)]
y <- x[!is.na(x)]
y
y[y > 0]
x[x > 0]
x[!is.na(x) & x > 0]
x[c(3, 5, 7)]
x[0]
x[3000]
x[c(-2, -10)]
x[-c(2, 10)]
vect <- c(foo = 11, bar = 2, norf = NA)
vect
names(vect)
vect2 <- c(11, 2, NA)
names(vect2) <- c("foo", "bar", "norf")
identical(vect, vect2)
vect["bar"]
vect[c("foo", "bar")]
my_vector <- 1:20
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector) <- c(4, 5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matrix <- my_vector
?matrix
my_matrix2 <- matrix(1:20, nrow = 4, ncol = 5)
identical(my_matrix, my_matrix2)
patients <- c("Bill", "Gina", "Kelly", "Sean")
cbind(vector, my_matrix)
cbind(patients, my_matrix)
my_data <- data.frame(patients, my_matrix)
my_data
class(my_data)
cnames <- c("patient, "age", "weight", "bp", "rating", "test"")
cnames <- c("patient", "age", "weight", "bp", "rating", "test"")
cnames <- c("patient", "age", "weight", "bp", "rating", "test")
cnames <- c("patient", "age", "weight", "bp", "rating", "test")
colnames(my_data) <- cnames
my_data
TRUE
TRUE == TRUE
(FALSE == TRUE) == FALSE
6 == 7
6 < 7
10 <= 1-
10 <= 10
5 != 7
!5 == 7
FALSE & FALSE
TRUE & c(TRUE, FALSE, FALSE)
TRUE && c(TRUE, FALSE, FALSE)
TRUE | c(TRUE, FALSE, FALSE)
TRUE || c(TRUE, FALSE, FALSE)
5 > 8 || 6 != 8 && 4 > 3.9
isTRUE(6 > 4)
identical('twins', 'twins')
xor(5 == 6, !FALSE)
ints <- sample(10)
ints
ints > 5
which(ints > 7)
any(ints < 0)
all(ints > 0)
add2 <- function(x, y) {
x + y
}
add2(1, 2)
above <- function(x, n) {
use <- x > n
x[use]
}
x <- 1:20
above(x, 12)
above <- function(x, n = 10) {
use <- x > n
x[use]
}
above(x, 12)
above(x)
columnmean <- function(y) {
nc <- ncol(y)
means <- numeric(nc)
for(i in 1:nc) {
means[i] <- mean(y[, i])
}
means
}
testdata <- read.csv(hw1_data.csv)
testdata <- read.csv("hw1_data.csv")
columnmean(testdata)
columnmean <- function(y, removeNA = TRUE) {
nc <- ncol(y)
means <- numeric(nc)
for(i in 1:nc) {
means[i] <- mean(y[, i], na.rm = removeNA)
}
means
}
columnmean(testdata)
swirl()
Sys.Date()
mean(c(2, 4, 5))
submit()
boring_function('My first function!')
boring_function
sumbit()
submit()
my_mean(c(4, 5, 10))
play
play()
my_mean(c(4, 5, 10))
my_mean <- function(my_vector) {
# Write your code here!
sum <- 0
for (element in my_vector)
{
sum <- sum + element
}
sum / length(my_vector)
# Remember: the last expression evaluated will be returned!
}
my_mean(c(4, 5, 10))
nxt()
submit()
remainder(5)
remainder(11, 5)
remainder(divisor = 11, num = 5)
remainder(4, div = 2)
args(remainder)
submit()
evaluate(sd, c(1.4, 3.6, 7.9, 8.8))
evaluate(function(x){x+1}, 6)
evaluate(function(x){x[1]}, c(8, 4, 0))
evaluate(function(x){x[length(x)], c(8, 4, 0)})
evaluate(function(x){x[length(x)]}, c(8, 4, 0))
?paste
paste("Programming", "is", "fun!")
submit()
telegram("The ships have arrived")
submit()
submit()
mad_libs(place = "McDonald's", adjective = "slimy", noun = "faucet")
submit()
'I' %p% 'love' %p% 'R!'
install.packages("lahman")
install.packages("Lahman")
clear
setwd("~/Projects/datasciencecoursera/specdata")
read.table("001.csv")
x <- read.table("001.csv")
x <- read.csv("001.csv")
x
x200 <- read.csv("200.csv")
x200
max(x200[!is.na(x)])
max(x200[!is.na(x200)])
max(x200[!is.na(x200),])
max(x200[,!is.na(x200)])
x200[,!is.na(x200)]
x200[!is.na(x200),]
x200[!is.na(x200["sulfate"]),]
?read.table
x200_good <- is.na(complete.cases(x200))
